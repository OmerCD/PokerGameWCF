//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PaymentClient.PokerGameServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Room", Namespace="http://schemas.datacontract.org/2004/07/PokerLibrary")]
    [System.SerializableAttribute()]
    public partial class Room : PaymentClient.PokerGameServiceReference.DbObject {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte MaxNumbersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, bool> PlayerReadyStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PaymentClient.PokerGameServiceReference.Player[] PlayersField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte MaxNumbers {
            get {
                return this.MaxNumbersField;
            }
            set {
                if ((this.MaxNumbersField.Equals(value) != true)) {
                    this.MaxNumbersField = value;
                    this.RaisePropertyChanged("MaxNumbers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, bool> PlayerReadyStatus {
            get {
                return this.PlayerReadyStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayerReadyStatusField, value) != true)) {
                    this.PlayerReadyStatusField = value;
                    this.RaisePropertyChanged("PlayerReadyStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PaymentClient.PokerGameServiceReference.Player[] Players {
            get {
                return this.PlayersField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayersField, value) != true)) {
                    this.PlayersField = value;
                    this.RaisePropertyChanged("Players");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DbObject", Namespace="http://schemas.datacontract.org/2004/07/MongoCRUD.Interfaces")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(PaymentClient.PokerGameServiceReference.Player))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(PaymentClient.PokerGameServiceReference.Room))]
    public partial class DbObject : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string _idField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string _id {
            get {
                return this._idField;
            }
            set {
                if ((object.ReferenceEquals(this._idField, value) != true)) {
                    this._idField = value;
                    this.RaisePropertyChanged("_id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Player", Namespace="http://schemas.datacontract.org/2004/07/PokerLibrary")]
    [System.SerializableAttribute()]
    public partial class Player : PaymentClient.PokerGameServiceReference.DbObject {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PokerGameServiceReference.IPokerService", CallbackContract=typeof(PaymentClient.PokerGameServiceReference.IPokerServiceCallback))]
    public interface IPokerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPokerService/GetRooms", ReplyAction="http://tempuri.org/IPokerService/GetRoomsResponse")]
        PaymentClient.PokerGameServiceReference.Room[] GetRooms();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPokerService/GetRooms", ReplyAction="http://tempuri.org/IPokerService/GetRoomsResponse")]
        System.Threading.Tasks.Task<PaymentClient.PokerGameServiceReference.Room[]> GetRoomsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPokerService/RegisterToRoom", ReplyAction="http://tempuri.org/IPokerService/RegisterToRoomResponse")]
        PaymentClient.PokerGameServiceReference.Room RegisterToRoom(string playerName, string roomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPokerService/RegisterToRoom", ReplyAction="http://tempuri.org/IPokerService/RegisterToRoomResponse")]
        System.Threading.Tasks.Task<PaymentClient.PokerGameServiceReference.Room> RegisterToRoomAsync(string playerName, string roomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPokerService/RegisterPlayer", ReplyAction="http://tempuri.org/IPokerService/RegisterPlayerResponse")]
        PaymentClient.PokerGameServiceReference.Player RegisterPlayer(string playerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPokerService/RegisterPlayer", ReplyAction="http://tempuri.org/IPokerService/RegisterPlayerResponse")]
        System.Threading.Tasks.Task<PaymentClient.PokerGameServiceReference.Player> RegisterPlayerAsync(string playerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPokerService/ExitFromRoom", ReplyAction="http://tempuri.org/IPokerService/ExitFromRoomResponse")]
        bool ExitFromRoom(string playerName, string roomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPokerService/ExitFromRoom", ReplyAction="http://tempuri.org/IPokerService/ExitFromRoomResponse")]
        System.Threading.Tasks.Task<bool> ExitFromRoomAsync(string playerName, string roomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPokerService/SendReady", ReplyAction="http://tempuri.org/IPokerService/SendReadyResponse")]
        void SendReady(string playerName, string roomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPokerService/SendReady", ReplyAction="http://tempuri.org/IPokerService/SendReadyResponse")]
        System.Threading.Tasks.Task SendReadyAsync(string playerName, string roomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPokerService/TestConnection", ReplyAction="http://tempuri.org/IPokerService/TestConnectionResponse")]
        bool TestConnection();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPokerService/TestConnection", ReplyAction="http://tempuri.org/IPokerService/TestConnectionResponse")]
        System.Threading.Tasks.Task<bool> TestConnectionAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPokerServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPokerService/StartTheGame")]
        void StartTheGame(string roomId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPokerService/RefreshRoomList")]
        void RefreshRoomList(string roomId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPokerServiceChannel : PaymentClient.PokerGameServiceReference.IPokerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PokerServiceClient : System.ServiceModel.DuplexClientBase<PaymentClient.PokerGameServiceReference.IPokerService>, PaymentClient.PokerGameServiceReference.IPokerService {
        
        public PokerServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public PokerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public PokerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PokerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PokerServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public PaymentClient.PokerGameServiceReference.Room[] GetRooms() {
            return base.Channel.GetRooms();
        }
        
        public System.Threading.Tasks.Task<PaymentClient.PokerGameServiceReference.Room[]> GetRoomsAsync() {
            return base.Channel.GetRoomsAsync();
        }
        
        public PaymentClient.PokerGameServiceReference.Room RegisterToRoom(string playerName, string roomId) {
            return base.Channel.RegisterToRoom(playerName, roomId);
        }
        
        public System.Threading.Tasks.Task<PaymentClient.PokerGameServiceReference.Room> RegisterToRoomAsync(string playerName, string roomId) {
            return base.Channel.RegisterToRoomAsync(playerName, roomId);
        }
        
        public PaymentClient.PokerGameServiceReference.Player RegisterPlayer(string playerName) {
            return base.Channel.RegisterPlayer(playerName);
        }
        
        public System.Threading.Tasks.Task<PaymentClient.PokerGameServiceReference.Player> RegisterPlayerAsync(string playerName) {
            return base.Channel.RegisterPlayerAsync(playerName);
        }
        
        public bool ExitFromRoom(string playerName, string roomId) {
            return base.Channel.ExitFromRoom(playerName, roomId);
        }
        
        public System.Threading.Tasks.Task<bool> ExitFromRoomAsync(string playerName, string roomId) {
            return base.Channel.ExitFromRoomAsync(playerName, roomId);
        }
        
        public void SendReady(string playerName, string roomId) {
            base.Channel.SendReady(playerName, roomId);
        }
        
        public System.Threading.Tasks.Task SendReadyAsync(string playerName, string roomId) {
            return base.Channel.SendReadyAsync(playerName, roomId);
        }
        
        public bool TestConnection() {
            return base.Channel.TestConnection();
        }
        
        public System.Threading.Tasks.Task<bool> TestConnectionAsync() {
            return base.Channel.TestConnectionAsync();
        }
    }
}
